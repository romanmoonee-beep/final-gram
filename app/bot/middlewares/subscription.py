# app/bot/middlewares/subscription.py
from typing import Callable, Dict, Any, Awaitable

import structlog
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select

from app.database.database import get_session
from app.database.models.required_subscription import RequiredSubscription
from app.services.telegram_api_service import TelegramAPIService
from app.config.settings import settings

logger = structlog.get_logger(__name__)

class SubscriptionMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    
    def __init__(self):
        self.telegram_api = TelegramAPIService()
        self.subscription_enabled = True  # –ë—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    async def __call__(
        self,
        handler: Callable[[Message | CallbackQuery, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        user_id = event.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤ - –∏–º –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        if user_id in settings.ADMIN_IDS:
            return await handler(event, data)
        
        # –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        allowed_commands = ['/start', '/check_subscription']
        
        if isinstance(event, Message) and event.text:
            if any(event.text.startswith(cmd) for cmd in allowed_commands):
                return await handler(event, data)
        
        # Callback'–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        if isinstance(event, CallbackQuery) and event.data:
            if event.data.startswith(('check_subscription', 'subscribe_')):
                return await handler(event, data)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        async with get_session() as session:
            result = await session.execute(
                select(RequiredSubscription)
                .where(RequiredSubscription.is_active == True)
                .order_by(RequiredSubscription.order_index)
            )
            required_channels = list(result.scalars().all())
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if not required_channels:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        unsubscribed_channels = []
        
        for channel in required_channels:
            is_subscribed = await self.telegram_api.check_user_subscription(
                user_id, channel.channel_url
            )
            
            if not is_subscribed:
                unsubscribed_channels.append(channel)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if unsubscribed_channels:
            await self._send_subscription_message(event, unsubscribed_channels)
            return
        
        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return await handler(event, data)
    
    async def _send_subscription_message(
        self, 
        event: Message | CallbackQuery, 
        channels: list[RequiredSubscription]
    ):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        text = """üîí <b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ü–û–î–ü–ò–°–ö–ê</b>

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:

"""
        
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
        for i, channel in enumerate(channels, 1):
            text += f"{i}. {channel.display_name}\n"
            
            builder.row(
                InlineKeyboardButton(
                    text=f"üì∫ {channel.display_name}",
                    url=channel.channel_url
                )
            )
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏",
                callback_data="check_subscription"
            )
        )
        
        text += "\nüí° <i>–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏\"</i>"
        
        if isinstance(event, Message):
            await event.answer(text, reply_markup=builder.as_markup())
        elif isinstance(event, CallbackQuery):
            await event.message.edit_text(text, reply_markup=builder.as_markup())
            await event.answer("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
from aiogram import Router, F
from aiogram.types import CallbackQuery

subscription_router = Router()

@subscription_router.callback_query(F.data == "check_subscription")
async def check_subscriptions(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    telegram_api = TelegramAPIService()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    async with get_session() as session:
        result = await session.execute(
            select(RequiredSubscription)
            .where(RequiredSubscription.is_active == True)
            .order_by(RequiredSubscription.order_index)
        )
        required_channels = list(result.scalars().all())
    
    if not required_channels:
        await callback.answer("‚úÖ –ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    unsubscribed = []
    
    for channel in required_channels:
        is_subscribed = await telegram_api.check_user_subscription(
            user_id, channel.channel_url
        )
        
        if not is_subscribed:
            unsubscribed.append(channel)
    
    if unsubscribed:
        # –ï—Å—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        text = "‚ùå <b>–í–´ –ù–ï –ü–û–î–ü–ò–°–ê–ù–´ –ù–ê:</b>\n\n"
        
        builder = InlineKeyboardBuilder()
        
        for channel in unsubscribed:
            text += f"‚Ä¢ {channel.display_name}\n"
            builder.row(
                InlineKeyboardButton(
                    text=f"üì∫ {channel.display_name}",
                    url=channel.channel_url
                )
            )
        
        builder.row(
            InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞",
                callback_data="check_subscription"
            )
        )
        
        text += "\nüí° <i>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞</i>"
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer("‚ùå –ù–µ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã")
    else:
        # –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã
        from app.bot.keyboards.main_menu import get_main_menu_keyboard
        from app.services.user_service import UserService
        
        user_service = UserService()
        user = await user_service.get_user(user_id)
        
        text = """‚úÖ <b>–ü–û–î–ü–ò–°–ö–ò –û–§–û–†–ú–õ–ï–ù–´!</b>

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.

üí∞ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å GRAM —É–∂–µ —Å–µ–π—á–∞—Å!"""
        
        await callback.message.edit_text(
            text,
            reply_markup=get_main_menu_keyboard(user)
        )
        await callback.answer("‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã!")