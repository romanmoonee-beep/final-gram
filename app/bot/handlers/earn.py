import structlog
logger = structlog.get_logger(__name__)

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command

from datetime import timezone

from app.database.models.user import User
from app.database.models.task import TaskType
from app.services.task_service import TaskService
from app.bot.keyboards.earn import EarnCallback, get_earn_menu_keyboard, get_task_list_keyboard, get_task_view_keyboard, get_task_execution_keyboard
from app.bot.keyboards.main_menu import MainMenuCallback
from app.bot.utils.messages import get_task_list_text, get_task_text, get_task_execution_text, get_error_message, get_success_message

router = Router()

@router.message(Command("earn"))
async def cmd_earn(message: Message, user: User):
    """–ö–æ–º–∞–Ω–¥–∞ /earn"""
    text = f"""üí∞ <b>–ó–ê–†–ê–ë–û–¢–ê–¢–¨ GRAM</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>
‚Ä¢ üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã - –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã - –±—ã—Å—Ç—Ä–∞—è –Ω–∞–≥—Ä–∞–¥–∞  
‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ - –ª–µ–≥–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üëç –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚Ä¢ ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–æ–≤ - –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞

üíé <b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å:</b> {user.get_level_config()['name']}
‚ö° <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥:</b> x{user.get_level_config()['task_multiplier']}

üí° <i>–ß–µ–º –≤—ã—à–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞!</i>"""
    
    await message.answer(
        text,
        reply_markup=get_earn_menu_keyboard()
    )

@router.callback_query(MainMenuCallback.filter(F.action == "earn"))
async def show_earn_from_menu(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = f"""üí∞ <b>–ó–ê–†–ê–ë–û–¢–ê–¢–¨ GRAM</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>
‚Ä¢ üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã - –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã - –±—ã—Å—Ç—Ä–∞—è –Ω–∞–≥—Ä–∞–¥–∞  
‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ - –ª–µ–≥–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üëç –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚Ä¢ ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–æ–≤ - –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞

üíé <b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å:</b> {user.get_level_config()['name']}
‚ö° <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥:</b> x{user.get_level_config()['task_multiplier']}

üí° <i>–ß–µ–º –≤—ã—à–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞!</i>"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_earn_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(EarnCallback.filter(F.action == "menu"))
async def show_earn_menu(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
    text = f"""üí∞ <b>–ó–ê–†–ê–ë–û–¢–ê–¢–¨ GRAM</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>
‚Ä¢ üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã - –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã - –±—ã—Å—Ç—Ä–∞—è –Ω–∞–≥—Ä–∞–¥–∞  
‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ - –ª–µ–≥–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üëç –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚Ä¢ ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–æ–≤ - –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞

üíé <b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å:</b> {user.get_level_config()['name']}
‚ö° <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥:</b> x{user.get_level_config()['task_multiplier']}

üí° <i>–ß–µ–º –≤—ã—à–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞!</i>"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_earn_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(EarnCallback.filter(F.action == "list"))
async def show_task_list(
    callback: CallbackQuery, 
    callback_data: EarnCallback,
    user: User,
    task_service: TaskService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"""
    task_type = None if callback_data.task_type == "all" else TaskType(callback_data.task_type)
    page = callback_data.page
    limit = 10
    offset = (page - 1) * limit
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
        tasks = await task_service.get_available_tasks(
            user=user,
            task_type=task_type,
            limit=limit + 1,  # +1 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            offset=offset
        )
        
        has_next = len(tasks) > limit
        if has_next:
            tasks = tasks[:limit]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = get_task_list_text(tasks, callback_data.task_type, page)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_task_list_keyboard(tasks, callback_data.task_type, page, has_next)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error("Error loading tasks", error=str(e), user_id=user.telegram_id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π", show_alert=True)

@router.callback_query(EarnCallback.filter(F.action == "view"))
async def view_task(
    callback: CallbackQuery,
    callback_data: EarnCallback,
    user: User,
    task_service: TaskService
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        task = await task_service.get_task_by_id(callback_data.task_id)
        
        if not task:
            await callback.answer(get_error_message("task_not_found"), show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
        if not task.is_active:
            await callback.answer(get_error_message("task_not_active"), show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if task.min_user_level:
            level_hierarchy = ["bronze", "silver", "gold", "premium"]
            if user.level not in level_hierarchy:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
                return
                
            required_index = level_hierarchy.index(task.min_user_level)
            user_index = level_hierarchy.index(user.level)
            
            if user_index < required_index:
                level_names = {
                    "bronze": "ü•â Bronze",
                    "silver": "ü•à Silver",
                    "gold": "ü•á Gold",
                    "premium": "üíé Premium"
                }
                required_level = level_names.get(task.min_user_level, task.min_user_level)
                await callback.answer(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å {required_level}", show_alert=True)
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        user_executions = await task_service.get_user_executions(user.telegram_id, limit=1000)
        for execution in user_executions:
            if execution.task_id == task.id:
                await callback.answer("‚ùå –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ", show_alert=True)
                return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        text = get_task_text(task, user)
        keyboard = get_task_view_keyboard(task, user)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error("Error viewing task", error=str(e), task_id=callback_data.task_id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è", show_alert=True)

@router.callback_query(EarnCallback.filter(F.action == "execute"))
async def execute_task(
    callback: CallbackQuery,
    callback_data: EarnCallback,
    user: User,
    task_service: TaskService
):
    """–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        task = await task_service.get_task_by_id(callback_data.task_id)
        
        if not task:
            await callback.answer(get_error_message("task_not_found"), show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        execution = await task_service.execute_task(
            task_id=task.id,
            user_id=user.telegram_id
        )
        
        if not execution:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", show_alert=True)
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        text = get_task_execution_text(task, user)
        keyboard = get_task_execution_keyboard(task)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞—á–∞—Ç–æ!")
        
    except Exception as e:
        logger.error("Error executing task", error=str(e), task_id=callback_data.task_id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è", show_alert=True)

@router.callback_query(EarnCallback.filter(F.action == "check"))
async def check_task_execution(
    callback: CallbackQuery,
    callback_data: EarnCallback,
    user: User,
    task_service: TaskService
):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        task = await task_service.get_task_by_id(callback_data.task_id)
        
        if not task:
            await callback.answer(get_error_message("task_not_found"), show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        executions = await task_service.get_user_executions(user.telegram_id, limit=100)
        
        execution = None
        for ex in executions:
            if ex.task_id == task.id and ex.status.value == "pending":
                execution = ex
                break
        
        if not execution:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –î–ª—è –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if task.auto_check:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Telegram API
            # –ü–æ–∫–∞ —á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            success = await task_service.complete_task_execution(
                execution.id,
                auto_checked=True,
                reviewer_id=None,
                review_comment="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
            )
            
            if success:
                user_config = user.get_level_config()
                final_reward = task.reward_amount * user_config['task_multiplier']
                
                success_text = f"""‚úÖ <b>–ó–ê–î–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–û!</b>

üéØ <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {task.title}
üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> +{final_reward:,.0f} GRAM –∑–∞—á–∏—Å–ª–µ–Ω–æ
‚ö° <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–≤–Ω—è:</b> x{user_config['task_multiplier']}

üéâ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞!

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
                
                from app.bot.keyboards.main_menu import get_main_menu_keyboard
                
                await callback.message.edit_text(
                    success_text,
                    reply_markup=get_main_menu_keyboard(user)
                )
                await callback.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º!")
            else:
                await callback.answer("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞", show_alert=True)
        else:
            # –î–ª—è –∑–∞–¥–∞–Ω–∏–π —Å —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await callback.answer("‚è≥ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤", show_alert=True)
            
    except Exception as e:
        logger.error("Error checking task execution", error=str(e), task_id=callback_data.task_id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è", show_alert=True)

@router.callback_query(EarnCallback.filter(F.action == "info"))
async def show_task_info(
    callback: CallbackQuery,
    callback_data: EarnCallback,
    task_service: TaskService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏"""
    try:
        task = await task_service.get_task_by_id(callback_data.task_id)
        
        if not task:
            await callback.answer(get_error_message("task_not_found"), show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞–¥–∞–Ω–∏—è
        analytics = await task_service.get_task_analytics(task.id)
        
        if not analytics:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É", show_alert=True)
            return
        
        # –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è
        type_names = {
            TaskType.CHANNEL_SUBSCRIPTION: "üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª",
            TaskType.GROUP_JOIN: "üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É",
            TaskType.POST_VIEW: "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞",
            TaskType.POST_REACTION: "üëç –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç",
            TaskType.BOT_INTERACTION: "ü§ñ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º"
        }
        
        type_name = type_names.get(task.type, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
        
        info_text = f"""‚ÑπÔ∏è <b>–ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>

üéØ <b>–ó–ê–î–ê–ù–ò–ï:</b>
‚îú –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}
‚îú –¢–∏–ø: {type_name}
‚îú –ê–≤—Ç–æ—Ä: ID{task.author_id}
‚îú –°–æ–∑–¥–∞–Ω–æ: {task.created_at.strftime('%d.%m.%Y %H:%M')}
‚îî –°—Å—ã–ª–∫–∞: {task.target_url}

üìä <b>–ü–†–û–ì–†–ï–°–°:</b>
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task.completed_executions}/{task.target_executions}
‚îú –ü—Ä–æ—Ü–µ–Ω—Ç: {task.completion_percentage:.1f}%
‚îú –û—Å—Ç–∞–ª–æ—Å—å: {task.remaining_executions}
‚îî –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {analytics['completion_rate']:.1f}%

üí∞ <b>–≠–ö–û–ù–û–ú–ò–ö–ê:</b>
‚îú –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {task.reward_amount:,.0f} GRAM
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {task.spent_budget:,.0f} GRAM
‚îú –û—Å—Ç–∞–µ—Ç—Å—è: {task.remaining_budget:,.0f} GRAM
‚îî –û–±—â–∏–π –±—é–¥–∂–µ—Ç: {task.total_budget:,.0f} GRAM

‚è±Ô∏è <b>–í–†–ï–ú–Ø:</b>"""
        
        if task.expires_at:
            from datetime import datetime
            remaining = task.expires_at - datetime.now(timezone.utc)
            if remaining.total_seconds() > 0:
                hours = int(remaining.total_seconds() // 3600)
                minutes = int((remaining.total_seconds() % 3600) // 60)
                info_text += f"\n‚îú –û—Å—Ç–∞–ª–æ—Å—å: {hours}—á {minutes}–º"
            else:
                info_text += "\n‚îú ‚è∞ –ó–∞–¥–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ"
        else:
            info_text += "\n‚îú –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏"
        
        if analytics.get('timing'):
            avg_time = analytics['timing']['average_seconds']
            info_text += f"\n‚îî –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_time:.0f} —Å–µ–∫"
        
        # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if task.min_user_level:
            level_names = {
                "bronze": "ü•â Bronze",
                "silver": "ü•à Silver", 
                "gold": "ü•á Gold",
                "premium": "üíé Premium"
            }
            req_level = level_names.get(task.min_user_level, task.min_user_level)
            info_text += f"\n\nüìã <b>–¢–†–ï–ë–û–í–ê–ù–ò–Ø:</b>\n‚îú –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {req_level}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        check_type = "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è" if task.auto_check else "üë®‚Äçüíº –†—É—á–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è"
        info_text += f"\n\nüîç <b>–¢–ò–ü –ü–†–û–í–ï–†–ö–ò:</b> {check_type}"
        
        from app.bot.keyboards.earn import get_task_view_keyboard
        
        await callback.message.edit_text(
            info_text,
            reply_markup=get_task_view_keyboard(task, callback.from_user)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error("Error showing task info", error=str(e), task_id=callback_data.task_id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(EarnCallback.filter(F.action == "cancel_execution"))
async def cancel_execution(
    callback: CallbackQuery,
    callback_data: EarnCallback,
    user: User,
    task_service: TaskService
):
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        executions = await task_service.get_user_executions(user.telegram_id, limit=100)
        
        execution = None
        for ex in executions:
            if ex.task_id == callback_data.task_id and ex.status.value == "pending":
                execution = ex
                break
        
        if execution:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–¥–∞–Ω–∏—é
            await view_task(callback, callback_data, user, task_service)
            await callback.answer("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        else:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            
    except Exception as e:
        logger.error("Error canceling execution", error=str(e), task_id=callback_data.task_id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", show_alert=True)

# –î–æ–±–∞–≤–∏–º –∏–º–ø–æ—Ä—Ç logger
import structlog
logger = structlog.get_logger(__name__)