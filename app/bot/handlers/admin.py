import asyncio
import logging
import structlog

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from decimal import Decimal, InvalidOperation
from datetime import datetime, timedelta
from sqlalchemy import select, func, and_, desc, or_

from aiogram.types import Message
from aiogram.filters import StateFilter

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.database.models.user import User
from app.database.models.task import Task, TaskStatus
from app.database.models.task_execution import TaskExecution, ExecutionStatus
from app.database.models.transaction import Transaction, TransactionType
from app.services.user_service import UserService
from app.services.task_service import TaskService
from app.services.transaction_service import TransactionService
from app.services.subscription_check import CheckService
from app.bot.keyboards.admin import (
    AdminCallback, get_admin_menu_keyboard, get_moderation_keyboard,
    get_task_moderation_keyboard, get_user_management_keyboard
)
from app.bot.keyboards.main_menu import MainMenuCallback, get_main_menu_keyboard
from app.bot.states.admin_states import AdminStates
from app.bot.filters.admin import AdminFilter
from app.config.settings import settings
from app.database.database import get_session
from app.database.models.required_subscription import RequiredSubscription

logger = structlog.get_logger(__name__)

router = Router()
router.message.filter(AdminFilter())  # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
router.callback_query.filter(AdminFilter())

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin"""
    text = """üîß <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>
    
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    await message.answer(
        text,
        reply_markup=get_admin_menu_keyboard()
    )

@router.callback_query(AdminCallback.filter(F.action == "menu"))
async def show_admin_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    text = """üîß <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>
    
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_menu_keyboard()
    )
    await callback.answer()

# =============================================================================
# –ú–û–î–ï–†–ê–¶–ò–Ø –ó–ê–î–ê–ù–ò–ô
# =============================================================================

@router.callback_query(AdminCallback.filter(F.action == "moderation"))
async def show_moderation_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    
    async with get_session() as session:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏
        pending_result = await session.execute(
            select(func.count(TaskExecution.id))
            .where(TaskExecution.status == ExecutionStatus.PENDING)
        )
        pending_count = pending_result.scalar() or 0
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π —Ç—Ä–µ–±—É—é—â–∏—Ö —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        manual_result = await session.execute(
            select(func.count(TaskExecution.id))
            .where(
                and_(
                    TaskExecution.status == ExecutionStatus.PENDING,
                    TaskExecution.auto_checked == False
                )
            )
        )
        manual_count = manual_result.scalar() or 0
    
    text = f"""üîç <b>–ú–û–î–ï–†–ê–¶–ò–Ø –ó–ê–î–ê–ù–ò–ô</b>

üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚îú –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {pending_count}
‚îú –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {manual_count}
‚îú –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: {pending_count - manual_count}
‚îî –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {pending_count}

‚ö° <b>–ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_moderation_keyboard()
    )
    await callback.answer()

@router.callback_query(AdminCallback.filter(F.action == "pending_tasks"))
async def show_pending_tasks(
    callback: CallbackQuery,
    callback_data: AdminCallback
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"""
    page = callback_data.page
    limit = 5
    offset = (page - 1) * limit
    
    async with get_session() as session:
        result = await session.execute(
            select(TaskExecution)
            .where(TaskExecution.status == ExecutionStatus.PENDING)
            .order_by(desc(TaskExecution.created_at))
            .limit(limit + 1)
            .offset(offset)
        )
        
        executions = list(result.scalars().all())
        has_next = len(executions) > limit
        if has_next:
            executions = executions[:limit]
    
    if not executions:
        text = """üîç <b>–ó–ê–î–ê–ù–ò–Ø –ù–ê –ü–†–û–í–ï–†–ö–ï</b>

‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!

üìä –í –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç."""
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=AdminCallback(action="moderation").pack()
            )
        )
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        return
    
    text = f"""üîç <b>–ó–ê–î–ê–ù–ò–Ø –ù–ê –ü–†–û–í–ï–†–ö–ï</b>

üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} | –í—Å–µ–≥–æ: {len(executions)}

–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:"""
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ó–∞–¥–∞–Ω–∏—è
    for execution in executions:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        task_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
        username = f"ID{execution.user_id}"
        
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å task –∏ user —á–µ—Ä–µ–∑ relations –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        task_result = await session.execute(
            select(Task).where(Task.id == execution.task_id)
        )
        task = task_result.scalar_one_or_none()
        
        user_result = await session.execute(
            select(User).where(User.telegram_id == execution.user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if task:
            task_title = task.title[:30] + "..." if len(task.title) > 30 else task.title
        if user:
            username = user.username or f"ID{user.telegram_id}"
        
        button_text = f"üéØ {task_title} | @{username}"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=AdminCallback(action="review_task", target_id=execution.id).pack()
            )
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=AdminCallback(action="pending_tasks", page=page-1).pack()
            )
        )
    
    if has_next:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
                callback_data=AdminCallback(action="pending_tasks", page=page+1).pack()
            )
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏",
            callback_data=AdminCallback(action="approve_auto").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
            callback_data=AdminCallback(action="moderation").pack()
        )
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(AdminCallback.filter(F.action == "review_task"))
async def review_task_execution(
    callback: CallbackQuery,
    callback_data: AdminCallback
):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    execution_id = callback_data.target_id
    
    async with get_session() as session:
        result = await session.execute(
            select(TaskExecution).where(TaskExecution.id == execution_id)
        )
        execution = result.scalar_one_or_none()
    
    if not execution:
        await callback.answer("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    async with get_session() as session:
        task_result = await session.execute(
            select(Task).where(Task.id == execution.task_id)
        )
        task = task_result.scalar_one_or_none()
        
        user_result = await session.execute(
            select(User).where(User.telegram_id == execution.user_id)
        )
        user = user_result.scalar_one_or_none()
    
    if not task or not user:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É
    auto_check_text = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞" if execution.auto_checked else "‚è≥ –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    text = f"""üìã <b>–ü–†–û–í–ï–†–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø</b>

üéØ <b>–ó–ê–î–ê–ù–ò–ï:</b>
‚îú –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}
‚îú –¢–∏–ø: {task.type.value}
‚îú –ê–≤—Ç–æ—Ä: ID{task.author_id}
‚îî –ù–∞–≥—Ä–∞–¥–∞: {execution.reward_amount:,.0f} GRAM

üë§ <b>–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨:</b>
‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–±–µ–∑ username'}
‚îú ID: {user.telegram_id}
‚îú –£—Ä–æ–≤–µ–Ω—å: {user.level.value}
‚îî –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution.created_at.strftime('%d.%m.%Y %H:%M')}

üîç <b>–ü–†–û–í–ï–†–ö–ê:</b>
‚îú –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: {auto_check_text}
‚îú –°—Å—ã–ª–∫–∞: {task.target_url}
‚îî –°—Ç–∞—Ç—É—Å: {execution.status.value}"""
    
    if execution.user_comment:
        text += f"\n\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{execution.user_comment}"
    
    if execution.screenshot_url:
        text += f"\n\nüì∑ <b>–°–∫—Ä–∏–Ω—à–æ—Ç:</b> –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω"
    
    keyboard = get_task_moderation_keyboard(execution.id)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(AdminCallback.filter(F.action == "approve"))
async def approve_task_execution(
    callback: CallbackQuery,
    callback_data: AdminCallback,
    task_service: TaskService
):
    """–û–¥–æ–±—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    execution_id = callback_data.target_id
    
    success = await task_service.complete_task_execution(
        execution_id,
        auto_checked=False,
        reviewer_id=callback.from_user.id,
        review_comment="–û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    )
    
    if success:
        await callback.answer("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø–ª–∞—á–µ–Ω–æ")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
        await show_pending_tasks(
            callback,
            AdminCallback(action="pending_tasks", page=1)
        )
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", show_alert=True)

@router.callback_query(AdminCallback.filter(F.action == "reject"))
async def start_reject_task(
    callback: CallbackQuery,
    callback_data: AdminCallback,
    state: FSMContext
):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    execution_id = callback_data.target_id
    
    await state.set_state(AdminStates.entering_reject_reason)
    await state.update_data(execution_id=execution_id)
    
    text = """‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø</b>

–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏—á–∏–Ω:</b>
‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
‚Ä¢ –§–∞–ª—å—à–∏–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await callback.message.edit_text(text)
    await callback.answer()

@router.message(AdminStates.entering_reject_reason)
async def process_reject_reason(
    message: Message,
    state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    reason = message.text.strip()
    
    if len(reason) > 200:
        await message.answer("‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    data = await state.get_data()
    execution_id = data['execution_id']
    
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    async with get_session() as session:
        result = await session.execute(
            select(TaskExecution).where(TaskExecution.id == execution_id)
        )
        execution = result.scalar_one_or_none()
        
        if execution:
            execution.status = ExecutionStatus.REJECTED
            execution.reviewer_id = message.from_user.id
            execution.review_comment = reason
            execution.reviewed_at = datetime.utcnow()
            
            await session.commit()
    
    await state.clear()
    
    text = f"""‚úÖ <b>–í–´–ü–û–õ–ù–ï–ù–ò–ï –û–¢–ö–õ–û–ù–ï–ù–û</b>

–ü—Ä–∏—á–∏–Ω–∞: {reason}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏."""
    
    await message.answer(
        text,
        reply_markup=get_admin_menu_keyboard()
    )

@router.callback_query(AdminCallback.filter(F.action == "approve_auto"))
async def mass_approve_auto_checks(
    callback: CallbackQuery,
    task_service: TaskService
):
    """–ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–æ–∫"""
    
    async with get_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        result = await session.execute(
            select(TaskExecution).where(
                and_(
                    TaskExecution.status == ExecutionStatus.PENDING,
                    TaskExecution.auto_checked == True
                )
            )
        )
        
        auto_executions = list(result.scalars().all())
        approved_count = 0
        
        for execution in auto_executions:
            success = await task_service.complete_task_execution(
                execution.id,
                auto_checked=True,
                reviewer_id=callback.from_user.id,
                review_comment="–ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–æ–∫"
            )
            
            if success:
                approved_count += 1
    
    text = f"""‚úÖ <b>–ú–ê–°–°–û–í–û–ï –û–î–û–ë–†–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û</b>

üìä –û–¥–æ–±—Ä–µ–Ω–æ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–æ–∫: {approved_count}

–í—Å–µ –∑–∞–¥–∞–Ω–∏—è —Å —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–æ–π –±—ã–ª–∏ –æ–¥–æ–±—Ä–µ–Ω—ã –∏ –æ–ø–ª–∞—á–µ–Ω—ã."""
    
    await callback.answer(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ {approved_count} –∑–∞–¥–∞–Ω–∏–π")
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_menu_keyboard()
    )

# =============================================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
# =============================================================================

@router.callback_query(AdminCallback.filter(F.action == "users"))
async def show_user_management(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    async with get_session() as session:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = await session.execute(select(func.count(User.id)))
        total_count = total_users.scalar() or 0
        
        # –ü–æ —É—Ä–æ–≤–Ω—è–º
        levels_stats = await session.execute(
            select(User.level, func.count(User.id))
            .group_by(User.level)
        )
        
        levels_data = dict(levels_stats.fetchall())
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–±—ã–ª–∏ –æ–Ω–ª–∞–π–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        week_ago = datetime.utcnow() - timedelta(days=7)
        
        active_users = await session.execute(
            select(func.count(User.id))
            .where(User.last_activity >= week_ago)
        )
        active_count = active_users.scalar() or 0
        
        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        banned_users = await session.execute(
            select(func.count(User.id))
            .where(User.is_banned == True)
        )
        banned_count = banned_users.scalar() or 0
    
    text = f"""üë• <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò</b>

üìä <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count:,}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {active_count:,}
‚îú –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {banned_count:,}
‚îî –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {(active_count/total_count*100 if total_count > 0 else 0):.1f}%

üìà <b>–ü–û –£–†–û–í–ù–Ø–ú:</b>
‚îú ü•â Bronze: {levels_data.get('bronze', 0):,}
‚îú ü•à Silver: {levels_data.get('silver', 0):,}
‚îú ü•á Gold: {levels_data.get('gold', 0):,}
‚îî üíé Premium: {levels_data.get('premium', 0):,}

‚ö° <b>–î–ï–ô–°–¢–í–ò–Ø:</b>
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_user_management_keyboard()
    )
    await callback.answer()

@router.callback_query(AdminCallback.filter(F.action == "find_user"))
async def start_find_user(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    await state.set_state(AdminStates.entering_user_id)
    
    text = """üîç <b>–ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>

–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username:

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>123456789</code> (Telegram ID)
‚Ä¢ <code>@username</code> (username)

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await callback.message.edit_text(text)
    await callback.answer()

@router.message(AdminStates.entering_user_id)
async def process_find_user(
    message: Message,
    state: FSMContext,
    user_service: UserService
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
    if query.startswith('@'):
        username = query[1:]
        # –ü–æ–∏—Å–∫ –ø–æ username
        async with get_session() as session:
            result = await session.execute(
                select(User).where(User.username == username)
            )
            user = result.scalar_one_or_none()
    else:
        try:
            user_id = int(query)
            user = await user_service.get_user(user_id)
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ username")
            return
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = await user_service.get_user_stats(user.telegram_id)
    
    status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
    if user.is_banned:
        status_text = f"‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {user.ban_reason}"
    
    text = f"""üë§ <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï</b>

üÜî <b>–û–°–ù–û–í–ù–û–ï:</b>
‚îú ID: <code>{user.telegram_id}</code>
‚îú Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚îú –ò–º—è: {user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚îú –°—Ç–∞—Ç—É—Å: {status_text}
‚îî –£—Ä–æ–≤–µ–Ω—å: {user.level}

üí∞ <b>–§–ò–ù–ê–ù–°–´:</b>
‚îú –ë–∞–ª–∞–Ω—Å: {user.balance:,.0f} GRAM
‚îú –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: {user.frozen_balance:,.0f} GRAM
‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.total_earned:,.0f} GRAM
‚îî –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.total_spent:,.0f} GRAM

üìä <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨:</b>
‚îú –ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {user.tasks_completed}
‚îú –ó–∞–¥–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: {user.tasks_created}
‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.total_referrals}
‚îú –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['total_transactions']}
‚îî –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: {stats['account_age_days']} –¥–Ω.

üìÖ <b>–î–ê–¢–´:</b>
‚îú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}
‚îî –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%d.%m.%Y %H:%M') if user.last_activity else '–¥–∞–≤–Ω–æ'}"""
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if not user.is_banned:
        builder.row(
            InlineKeyboardButton(
                text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=AdminCallback(action="ban_user", target_id=user.telegram_id).pack()
            )
        )
    else:
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=AdminCallback(action="unban_user", target_id=user.telegram_id).pack()
            )
        )
    
    builder.row(
        InlineKeyboardButton(
            text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
            callback_data=AdminCallback(action="change_balance", target_id=user.telegram_id).pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data=AdminCallback(action="user_details", target_id=user.telegram_id).pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
            callback_data=AdminCallback(action="users").pack()
        )
    )
    
    await message.answer(text, reply_markup=builder.as_markup())
    await state.clear()

@router.callback_query(AdminCallback.filter(F.action == "change_balance"))
async def start_change_balance(
    callback: CallbackQuery,
    callback_data: AdminCallback,
    state: FSMContext
):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_data.target_id
    
    await state.set_state(AdminStates.entering_bonus_amount)
    await state.update_data(user_id=user_id)
    
    text = """üí∞ <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê</b>

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:

üí° <b>–§–æ—Ä–º–∞—Ç:</b>
‚Ä¢ +1000 - –¥–æ–±–∞–≤–∏—Ç—å 1000 GRAM
‚Ä¢ -500 - —Å–ø–∏—Å–∞—Ç—å 500 GRAM
‚Ä¢ 2000 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å 2000 GRAM

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await callback.message.edit_text(text)
    await callback.answer()

@router.message(AdminStates.entering_bonus_amount)
async def process_balance_change(
    message: Message,
    state: FSMContext,
    user_service: UserService
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        amount_str = message.text.strip()
        data = await state.get_data()
        user_id = data['user_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_user(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        old_balance = user.balance
        
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
        if amount_str.startswith('+'):
            # –î–æ–±–∞–≤–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É
            amount = Decimal(amount_str[1:])
            operation = "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ"
            operation_type = TransactionType.ADMIN_BONUS
        elif amount_str.startswith('-'):
            # –°–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞
            amount = Decimal(amount_str[1:])
            if old_balance < amount:
                await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è")
                return
            amount = -amount  # –î–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            operation = "–°–ø–∏—Å–∞–Ω–∏–µ"
            operation_type = TransactionType.ADMIN_PENALTY
        else:
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
            new_balance = Decimal(amount_str)
            amount = new_balance - old_balance
            operation = "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞"
            operation_type = TransactionType.ADMIN_ADJUSTMENT
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        success = await user_service.update_balance(
            user_id,
            amount,
            operation_type,
            f"{operation} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º #{message.from_user.id}"
        )
        
        if success:
            updated_user = await user_service.get_user(user_id)
            text = f"""‚úÖ <b>–ë–ê–õ–ê–ù–° –ò–ó–ú–ï–ù–ï–ù</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID{user_id}
üí∞ –ë—ã–ª–æ: {old_balance:,.0f} GRAM
üí∞ –°—Ç–∞–ª–æ: {updated_user.balance:,.0f} GRAM
üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {amount:+,.0f} GRAM

–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º #{message.from_user.id}"""
            
            await message.answer(text, reply_markup=get_admin_menu_keyboard())
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        
    except (ValueError, InvalidOperation):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –∏ +/- –ø—Ä–µ—Ñ–∏–∫—Å—ã")
        return
    
    await state.clear()

@router.callback_query(AdminCallback.filter(F.action == "ban_user"))
async def start_ban_user(
    callback: CallbackQuery,
    callback_data: AdminCallback,
    state: FSMContext
):
    """–ù–∞—á–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    user_id = callback_data.target_id
    await state.set_state(AdminStates.entering_ban_reason)
    await state.update_data(user_id=user_id)
    
    text = """üö´ <b>–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>

–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏—á–∏–Ω:</b>
‚Ä¢ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
‚Ä¢ –°–ø–∞–º
‚Ä¢ –§–µ–π–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await callback.message.edit_text(text)
    await callback.answer()

@router.message(AdminStates.entering_ban_reason)
async def process_ban_user(
    message: Message,
    state: FSMContext,
    user_service: UserService
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    reason = message.text.strip()
    
    if len(reason) > 200:
        await message.answer("‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    data = await state.get_data()
    user_id = data['user_id']
    
    success = await user_service.ban_user(
        user_id,
        reason,
        message.from_user.id
    )
    
    await state.clear()
    
    if success:
        text = f"""‚úÖ <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù</b>

ID: {user_id}
–ü—Ä–∏—á–∏–Ω–∞: {reason}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."""
    else:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    await message.answer(
        text,
        reply_markup=get_admin_menu_keyboard()
    )

@router.callback_query(AdminCallback.filter(F.action == "unban_user"))
async def unban_user(
    callback: CallbackQuery,
    callback_data: AdminCallback,
    user_service: UserService
):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    user_id = callback_data.target_id
    
    success = await user_service.unban_user(user_id, callback.from_user.id)
    
    if success:
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        text = f"""‚úÖ <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù</b>

ID: {user_id}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."""
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", show_alert=True)
        return
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_menu_keyboard()
    )

# =============================================================================
# –°–¢–ê–¢–ò–°–¢–ò–ö–ê
# =============================================================================

@router.callback_query(AdminCallback.filter(F.action == "stats"))
async def show_system_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    
    async with get_session() as session:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_total = await session.execute(select(func.count(User.id)))
        users_count = users_total.scalar() or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π
        tasks_stats = await session.execute(
            select(Task.status, func.count(Task.id))
            .group_by(Task.status)
        )
        tasks_by_status = dict(tasks_stats.fetchall())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        executions_stats = await session.execute(
            select(TaskExecution.status, func.count(TaskExecution.id))
            .group_by(TaskExecution.status)
        )
        executions_by_status = dict(executions_stats.fetchall())
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_gram = await session.execute(
            select(func.sum(User.balance))
        )
        total_balance = total_gram.scalar() or 0
        
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 24 —á–∞—Å–∞
        yesterday = datetime.utcnow() - timedelta(days=1)
        recent_transactions = await session.execute(
            select(func.count(Transaction.id))
            .where(Transaction.created_at >= yesterday)
        )
        recent_tx_count = recent_transactions.scalar() or 0
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 24 —á–∞—Å–∞
        new_users = await session.execute(
            select(func.count(User.id))
            .where(User.created_at >= yesterday)
        )
        new_users_count = new_users.scalar() or 0
    
    text = f"""üìä <b>–°–ò–°–¢–ï–ú–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>

üë• <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:</b>
‚îú –í—Å–µ–≥–æ: {users_count:,}
‚îú –ù–æ–≤—ã—Ö –∑–∞ 24—á: {new_users_count:,}
‚îî –†–æ—Å—Ç: {(new_users_count/users_count*100 if users_count > 0 else 0):.2f}%

üéØ <b>–ó–ê–î–ê–ù–ò–Ø:</b>
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: {tasks_by_status.get(TaskStatus.ACTIVE, 0):,}
‚îú –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {tasks_by_status.get(TaskStatus.COMPLETED, 0):,}
‚îú –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: {tasks_by_status.get(TaskStatus.PAUSED, 0):,}
‚îî –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: {tasks_by_status.get(TaskStatus.CANCELLED, 0):,}

üíº <b>–í–´–ü–û–õ–ù–ï–ù–ò–Ø:</b>
‚îú –û–∂–∏–¥–∞—é—Ç: {executions_by_status.get(ExecutionStatus.PENDING, 0):,}
‚îú –ó–∞–≤–µ—Ä—à–µ–Ω—ã: {executions_by_status.get(ExecutionStatus.COMPLETED, 0):,}
‚îú –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: {executions_by_status.get(ExecutionStatus.REJECTED, 0):,}
‚îî –ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã: {executions_by_status.get(ExecutionStatus.EXPIRED, 0):,}

üí∞ <b>–§–ò–ù–ê–ù–°–´:</b>
‚îú –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:,.0f} GRAM
‚îú –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 24—á: {recent_tx_count:,}
‚îî –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {(total_balance/users_count if users_count > 0 else 0):,.0f} GRAM

üïê <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}"""
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data=AdminCallback(action="finance_stats").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            callback_data=AdminCallback(action="stats").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É",
            callback_data=AdminCallback(action="menu").pack()
        )
    )

    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
    except:
        await callback.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ")

@router.callback_query(AdminCallback.filter(F.action == "finance_stats"))
async def show_finance_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    
    async with get_session() as session:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        tx_types_stats = await session.execute(
            select(
                Transaction.type,
                func.count(Transaction.id).label('count'),
                func.sum(Transaction.amount).label('total')
            )
            .group_by(Transaction.type)
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.utcnow() - timedelta(days=7)
        weekly_stats = await session.execute(
            select(
                func.sum(Transaction.amount).filter(Transaction.amount > 0).label('income'),
                func.sum(Transaction.amount).filter(Transaction.amount < 0).label('spending'),
                func.count(Transaction.id).label('total_tx')
            )
            .where(Transaction.created_at >= week_ago)
        )
        
        weekly = weekly_stats.first()
        
        # –¢–û–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É
        top_users = await session.execute(
            select(User.telegram_id, User.username, User.balance)
            .order_by(User.balance.desc())
            .limit(5)
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Stars –ø–ª–∞—Ç–µ–∂–µ–π
        stars_stats = await session.execute(
            select(
                func.count(Transaction.id).label('count'),
                func.sum(Transaction.amount).label('total_gram'),
                func.sum(Transaction.stars_amount).label('total_stars')
            )
            .where(Transaction.type == TransactionType.DEPOSIT_STARS)
        )
        
        stars = stars_stats.first()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
    types_text = ""
    for row in tx_types_stats:
        tx_type = row.type
        count = row.count
        total = row.total or 0
        
        type_names = {
            TransactionType.DEPOSIT_STARS: '‚≠ê Stars',
            TransactionType.TASK_REWARD: 'üéØ –ù–∞–≥—Ä–∞–¥—ã',
            TransactionType.TASK_CREATION: 'üì¢ –°–æ–∑–¥–∞–Ω–∏–µ',
            TransactionType.REFERRAL_BONUS: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã'
        }
        
        name = type_names.get(tx_type)
        types_text += f"‚îú {name}: {count:,} —à—Ç. | {total:,.0f} GRAM\n"
    
    text = f"""üí∞ <b>–§–ò–ù–ê–ù–°–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>

üìä <b>–ó–ê –ù–ï–î–ï–õ–Æ:</b>
‚îú –î–æ—Ö–æ–¥—ã: +{float(weekly.income or 0):,.0f} GRAM
‚îú –†–∞—Å—Ö–æ–¥—ã: {float(weekly.spending or 0):,.0f} GRAM
‚îú –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {weekly.total_tx:,}
‚îî –ü—Ä–∏–±—ã–ª—å: {float((weekly.income or 0) + (weekly.spending or 0)):,.0f} GRAM

üåü <b>TELEGRAM STARS:</b>
‚îú –ü–ª–∞—Ç–µ–∂–µ–π: {stars.count or 0:,}
‚îú –ü–æ–ª—É—á–µ–Ω–æ GRAM: {float(stars.total_gram or 0):,.0f}
‚îî –ü–æ–ª—É—á–µ–Ω–æ Stars: {stars.total_stars or 0:,}

üìà <b>–ü–û –¢–ò–ü–ê–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:</b>
{types_text}

üèÜ <b>–¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:</b>"""
    
    for i, user in enumerate(top_users, 1):
        username = user.username or f"ID{user.telegram_id}"
        text += f"\n{i}. @{username}: {user.balance:,.0f} GRAM"
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            callback_data=AdminCallback(action="detailed_analytics").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
            callback_data=AdminCallback(action="stats").pack()
        )
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(AdminCallback.filter(F.action == "top_users"))
async def show_top_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¢–û–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with get_session() as session:
        # –¢–û–ü –ø–æ –±–∞–ª–∞–Ω—Å—É
        top_balance = await session.execute(
            select(User.telegram_id, User.username, User.balance)
            .order_by(User.balance.desc())
            .limit(10)
        )

        # –¢–û–ü –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
        top_tasks = await session.execute(
            select(User.telegram_id, User.username, User.tasks_completed)
            .order_by(User.tasks_completed.desc())
            .limit(10)
        )

    text = "üèÜ <b>–¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\nüí∞ <b>–ü–û –ë–ê–õ–ê–ù–°–£:</b>\n"

    for i, user in enumerate(top_balance, 1):
        username = user.username or f"ID{user.telegram_id}"
        text += f"{i}. @{username}: {user.balance:,.0f} GRAM\n"

    text += "\nüéØ <b>–ü–û –ó–ê–î–ê–ù–ò–Ø–ú:</b>\n"
    for i, user in enumerate(top_tasks, 1):
        username = user.username or f"ID{user.telegram_id}"
        text += f"{i}. @{username}: {user.tasks_completed} –∑–∞–¥–∞–Ω–∏–π\n"

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
            callback_data=AdminCallback(action="users").pack()
        )
    )

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(AdminCallback.filter(F.action == "user_analytics"))
async def show_user_analytics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with get_session() as session:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = await session.execute(select(func.count(User.id)))
        week_ago = datetime.utcnow() - timedelta(days=7)

        new_users = await session.execute(
            select(func.count(User.id))
            .where(User.created_at >= week_ago)
        )

        active_users = await session.execute(
            select(func.count(User.id))
            .where(User.last_activity >= week_ago)
        )

        # –ü–æ —É—Ä–æ–≤–Ω—è–º
        levels_stats = await session.execute(
            select(User.level, func.count(User.id))
            .group_by(User.level)
        )

    total_count = total_users.scalar() or 0
    new_count = new_users.scalar() or 0
    active_count = active_users.scalar() or 0

    text = f"""üìä <b>–ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>

üë• <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count:,}
‚îú –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_count:,}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_count:,}
‚îî –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {(active_count / total_count * 100 if total_count > 0 else 0):.1f}%

üìà <b>–ü–û –£–†–û–í–ù–Ø–ú:</b>"""

    levels_data = dict(levels_stats.fetchall())
    level_names = {"bronze": "ü•â Bronze", "silver": "ü•à Silver", "gold": "ü•á Gold", "premium": "üíé Premium"}

    for level, name in level_names.items():
        count = levels_data.get(level, 0)
        text += f"\n‚îú {name}: {count:,}"

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
            callback_data=AdminCallback(action="users").pack()
        )
    )

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(AdminCallback.filter(F.action == "mass_bonus"))
async def start_mass_bonus(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ"""
    await state.set_state(AdminStates.entering_mass_bonus_amount)

    text = """üí∞ <b>–ú–ê–°–°–û–í–û–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–ï</b>

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
- 100 - –Ω–∞—á–∏—Å–ª–∏—Ç—å 100 GRAM –≤—Å–µ–º
- 500 - –Ω–∞—á–∏—Å–ª–∏—Ç—å 500 GRAM –≤—Å–µ–º

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""

    await callback.message.edit_text(text)
    await callback.answer()


@router.message(AdminStates.entering_mass_bonus_amount)
async def process_mass_bonus(
        message: Message,
        state: FSMContext,
        user_service: UserService
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ"""
    try:
        amount = Decimal(message.text.strip())

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with get_session() as session:
            result = await session.execute(
                select(User.telegram_id).where(
                    and_(User.is_active == True, User.is_banned == False)
                )
            )
            user_ids = [row[0] for row in result.fetchall()]

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"confirm_mass_bonus_{amount}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_mass_bonus"
            )
        )

        await state.update_data(amount=float(amount), user_ids=user_ids)

        text = f"""üí∞ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø</b>

üí∞ –°—É–º–º–∞: {amount:,.0f} GRAM –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids):,}
üí≥ –û–±—â–∞—è —Å—É–º–º–∞: {float(amount) * len(user_ids):,.0f} GRAM

‚ö†Ô∏è <b>–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!</b>"""

        await message.answer(text, reply_markup=builder.as_markup())

    except (ValueError, InvalidOperation):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")


@router.callback_query(F.data.startswith("confirm_mass_bonus_"))
async def confirm_mass_bonus(callback: CallbackQuery, state: FSMContext, user_service: UserService):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ"""
    data = await state.get_data()
    amount = data.get('amount')
    user_ids = data.get('user_ids', [])

    if not amount or not user_ids:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        await state.clear()
        return

    await callback.message.edit_text("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ...")

    success_count = 0
    for user_id in user_ids:
        success = await user_service.update_balance(
            user_id,
            amount,
            "admin_bonus",
            f"–ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ #{callback.from_user.id}"
        )
        if success:
            success_count += 1

    text = f"""‚úÖ <b>–ú–ê–°–°–û–í–û–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û</b>

üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {amount:,.0f} GRAM
üë• –£—Å–ø–µ—à–Ω–æ: {success_count:,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚ùå –û—à–∏–±–æ–∫: {len(user_ids) - success_count}

–û–±—â–∞—è —Å—É–º–º–∞: {float(amount) * success_count:,.0f} GRAM"""

    await callback.message.edit_text(text, reply_markup=get_admin_menu_keyboard())
    await state.clear()
    await callback.answer("‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

@router.callback_query(AdminCallback.filter(F.action == "subscriptions"))
async def show_subscriptions_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""

    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        result = await session.execute(
            select(RequiredSubscription)
            .order_by(RequiredSubscription.order_index, RequiredSubscription.id)
        )
        subscriptions = list(result.scalars().all())

        active_count = len([s for s in subscriptions if s.is_active])

    text = f"""üì∫ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò</b>

üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚îú –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(subscriptions)}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}
‚îú –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {len(subscriptions) - active_count}
‚îî –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {'üü¢ –í–∫–ª—é—á–µ–Ω–∞' if active_count > 0 else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞'}

‚öôÔ∏è <b>–§–£–ù–ö–¶–ò–ò:</b>
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫

üí° <i>–ê–¥–º–∏–Ω—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏</i>"""

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton

    builder = InlineKeyboardBuilder()

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
    builder.row(
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
            callback_data=AdminCallback(action="add_subscription").pack()
        )
    )

    if subscriptions:
        builder.row(
            InlineKeyboardButton(
                text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤",
                callback_data=AdminCallback(action="list_subscriptions").pack()
            ),
            InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data=AdminCallback(action="subscription_stats").pack()
            )
        )

    # –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if subscriptions:
        builder.row(
            InlineKeyboardButton(
                text="üü¢ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ",
                callback_data=AdminCallback(action="enable_all_subs").pack()
            ),
            InlineKeyboardButton(
                text="üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ",
                callback_data=AdminCallback(action="disable_all_subs").pack()
            )
        )

    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É",
            callback_data=AdminCallback(action="menu").pack()
        )
    )

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(AdminCallback.filter(F.action == "add_subscription"))
async def start_add_subscription(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""

    await state.set_state(AdminStates.entering_channel_url)

    text = """‚ûï <b>–î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê</b>

–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:

üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ @username
‚Ä¢ https://t.me/username
‚Ä¢ https://t.me/joinchat/xxxxx

üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ @my_channel
‚Ä¢ https://t.me/my_channel
‚Ä¢ https://t.me/joinchat/AAAA1A1aA1aA1a

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""

    await callback.message.edit_text(text)
    await callback.answer()


@router.message(AdminStates.entering_channel_url)
async def process_channel_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª"""
    from app.services.telegram_api_service import TelegramAPIService
    from app.bot.utils.validators import TelegramValidator

    url = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    is_valid, error = TelegramValidator.validate_channel_url(url)
    if not is_valid:
        await message.answer(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    telegram_api = TelegramAPIService()
    channel_info = await telegram_api.get_chat_info(url)

    if not channel_info:
        await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL
    if url.startswith('@'):
        normalized_url = f"https://t.me/{url[1:]}"
        username = url
    elif 'joinchat' in url or '+' in url:
        normalized_url = url
        username = channel_info.get('title', '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
    else:
        normalized_url = url
        username = f"@{channel_info.get('username', '')}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
    async with get_session() as session:
        existing = await session.execute(
            select(RequiredSubscription)
            .where(RequiredSubscription.channel_url == normalized_url)
        )

        if existing.scalar_one_or_none():
            await message.answer("‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        subscription = RequiredSubscription(
            channel_username=username,
            channel_title=channel_info.get('title'),
            channel_url=normalized_url,
            created_by=message.from_user.id,
            order_index=0  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        )

        session.add(subscription)
        await session.commit()
        await session.refresh(subscription)

    text = f"""‚úÖ <b>–ö–ê–ù–ê–õ –î–û–ë–ê–í–õ–ï–ù!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {subscription.display_name}
üîó <b>–°—Å—ã–ª–∫–∞:</b> {normalized_url}
üìä <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {channel_info.get('member_count', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."""

    await message.answer(text, reply_markup=get_admin_menu_keyboard())
    await state.clear()


@router.callback_query(AdminCallback.filter(F.action == "list_subscriptions"))
async def show_subscriptions_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""

    async with get_session() as session:
        result = await session.execute(
            select(RequiredSubscription)
            .order_by(RequiredSubscription.order_index, RequiredSubscription.id)
        )
        subscriptions = list(result.scalars().all())

    if not subscriptions:
        text = """üìã <b>–°–ü–ò–°–û–ö –ö–ê–ù–ê–õ–û–í</b>

üì≠ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.

–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª:"""

        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                callback_data=AdminCallback(action="add_subscription").pack()
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=AdminCallback(action="subscriptions").pack()
            )
        )

        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        return

    text = f"""üìã <b>–°–ü–ò–°–û–ö –ö–ê–ù–ê–õ–û–í</b>

üìä –í—Å–µ–≥–æ: {len(subscriptions)} –∫–∞–Ω–∞–ª–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"""

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton

    builder = InlineKeyboardBuilder()

    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    for subscription in subscriptions:
        status_icon = "üü¢" if subscription.is_active else "üî¥"

        button_text = f"{status_icon} {subscription.display_name}"

        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=AdminCallback(action="manage_subscription", target_id=subscription.id).pack()
            )
        )

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    builder.row(
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
            callback_data=AdminCallback(action="add_subscription").pack()
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=AdminCallback(action="subscriptions").pack()
        )
    )

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(AdminCallback.filter(F.action == "manage_subscription"))
async def manage_subscription(callback: CallbackQuery, callback_data: AdminCallback):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º"""
    subscription_id = callback_data.target_id

    async with get_session() as session:
        result = await session.execute(
            select(RequiredSubscription).where(RequiredSubscription.id == subscription_id)
        )
        subscription = result.scalar_one_or_none()

    if not subscription:
        await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if subscription.is_active else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"

    text = f"""üì∫ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–û–ú</b>

üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {subscription.display_name}
üîó <b>–°—Å—ã–ª–∫–∞:</b> {subscription.channel_url}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {subscription.created_at.strftime('%d.%m.%Y %H:%M')}
üë§ <b>–ê–¥–º–∏–Ω:</b> ID{subscription.created_by}
üî¢ <b>–ü–æ—Ä—è–¥–æ–∫:</b> {subscription.order_index}

‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>"""

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton

    builder = InlineKeyboardBuilder()

    # –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
    if subscription.is_active:
        builder.row(
            InlineKeyboardButton(
                text="üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å",
                callback_data=AdminCallback(action="disable_subscription", target_id=subscription.id).pack()
            )
        )
    else:
        builder.row(
            InlineKeyboardButton(
                text="üü¢ –í–∫–ª—é—á–∏—Ç—å",
                callback_data=AdminCallback(action="enable_subscription", target_id=subscription.id).pack()
            )
        )

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÜÔ∏è –ü–æ–¥–Ω—è—Ç—å",
            callback_data=AdminCallback(action="move_subscription_up", target_id=subscription.id).pack()
        ),
        InlineKeyboardButton(
            text="‚¨áÔ∏è –û–ø—É—Å—Ç–∏—Ç—å",
            callback_data=AdminCallback(action="move_subscription_down", target_id=subscription.id).pack()
        )
    )

    # –£–¥–∞–ª–µ–Ω–∏–µ
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª",
            callback_data=AdminCallback(action="delete_subscription", target_id=subscription.id).pack()
        )
    )

    # –ù–∞–∑–∞–¥
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤",
            callback_data=AdminCallback(action="list_subscriptions").pack()
        )
    )

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(AdminCallback.filter(F.action == "enable_subscription"))
async def enable_subscription(callback: CallbackQuery, callback_data: AdminCallback):
    """–í–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª"""
    subscription_id = callback_data.target_id

    async with get_session() as session:
        result = await session.execute(
            select(RequiredSubscription).where(RequiredSubscription.id == subscription_id)
        )
        subscription = result.scalar_one_or_none()

        if subscription:
            subscription.is_active = True
            await session.commit()

            await callback.answer("üü¢ –ö–∞–Ω–∞–ª –≤–∫–ª—é—á–µ–Ω")
            await manage_subscription(callback, callback_data)
        else:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.callback_query(AdminCallback.filter(F.action == "disable_subscription"))
async def disable_subscription(callback: CallbackQuery, callback_data: AdminCallback):
    """–û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª"""
    subscription_id = callback_data.target_id

    async with get_session() as session:
        result = await session.execute(
            select(RequiredSubscription).where(RequiredSubscription.id == subscription_id)
        )
        subscription = result.scalar_one_or_none()

        if subscription:
            subscription.is_active = False
            await session.commit()

            await callback.answer("üî¥ –ö–∞–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω")
            await manage_subscription(callback, callback_data)
        else:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.callback_query(AdminCallback.filter(F.action == "delete_subscription"))
async def delete_subscription_confirm(callback: CallbackQuery, callback_data: AdminCallback):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    subscription_id = callback_data.target_id

    async with get_session() as session:
        result = await session.execute(
            select(RequiredSubscription).where(RequiredSubscription.id == subscription_id)
        )
        subscription = result.scalar_one_or_none()

    if not subscription:
        await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    text = f"""‚ö†Ô∏è <b>–£–î–ê–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {subscription.display_name}
üîó <b>–°—Å—ã–ª–∫–∞:</b> {subscription.channel_url}

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫?

‚ùå <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>"""

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
            callback_data=AdminCallback(action="delete_subscription_confirm", target_id=subscription.id).pack()
        ),
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=AdminCallback(action="manage_subscription", target_id=subscription.id).pack()
        )
    )

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(AdminCallback.filter(F.action == "delete_subscription_confirm"))
async def delete_subscription_final(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    subscription_id = callback_data.target_id

    async with get_session() as session:
        result = await session.execute(
            select(RequiredSubscription).where(RequiredSubscription.id == subscription_id)
        )
        subscription = result.scalar_one_or_none()

        if subscription:
            channel_name = subscription.display_name
            await session.delete(subscription)
            await session.commit()

            text = f"""‚úÖ <b>–ö–ê–ù–ê–õ –£–î–ê–õ–ï–ù</b>

üì∫ –ö–∞–Ω–∞–ª "{channel_name}" —É–¥–∞–ª–µ–Ω –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""

            await callback.message.edit_text(
                text,
                reply_markup=get_admin_menu_keyboard()
            )
            await callback.answer("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω")
        else:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.callback_query(AdminCallback.filter(F.action.in_(["enable_all_subs", "disable_all_subs"])))
async def toggle_all_subscriptions(callback: CallbackQuery, callback_data: AdminCallback):
    """–í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
    enable = callback_data.action == "enable_all_subs"

    async with get_session() as session:
        result = await session.execute(select(RequiredSubscription))
        subscriptions = list(result.scalars().all())

        count = 0
        for subscription in subscriptions:
            if subscription.is_active != enable:
                subscription.is_active = enable
                count += 1

        await session.commit()

    action_text = "–≤–∫–ª—é—á–µ–Ω—ã" if enable else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    icon = "üü¢" if enable else "üî¥"

    await callback.answer(f"{icon} {count} –∫–∞–Ω–∞–ª–æ–≤ {action_text}")
    await show_subscriptions_menu(callback)


@router.callback_query(AdminCallback.filter(F.action == "subscription_stats"))
async def show_subscription_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫"""

    from app.services.telegram_api_service import TelegramAPIService
    telegram_api = TelegramAPIService()

    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        channels_result = await session.execute(
            select(RequiredSubscription)
            .order_by(RequiredSubscription.order_index, RequiredSubscription.id)
        )
        channels = list(channels_result.scalars().all())

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = await session.execute(select(func.count(User.id)))
        total_count = total_users.scalar() or 0

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        week_ago = datetime.utcnow() - timedelta(days=7)
        active_users_result = await session.execute(
            select(User.telegram_id)
            .where(
                and_(
                    User.is_active == True,
                    User.is_banned == False,
                    User.last_activity >= week_ago
                )
            )
        )
        active_users = [row[0] for row in active_users_result.fetchall()]

        # –ê–¥–º–∏–Ω—ã (–∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏)
        admins_count = len([uid for uid in active_users if uid in settings.ADMIN_IDS])
        non_admin_users = [uid for uid in active_users if uid not in settings.ADMIN_IDS]

    if not channels:
        text = """üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–î–ü–ò–°–û–ö</b>

üì≠ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.

–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""

        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                callback_data=AdminCallback(action="add_subscription").pack()
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=AdminCallback(action="subscriptions").pack()
            )
        )

        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await callback.message.edit_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫...")

    channel_stats = []
    total_subscribed = 0
    total_checks = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    for channel in channels:
        if not channel.is_active:
            continue

        subscribed_count = 0
        checked_count = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –∞–¥–º–∏–Ω–æ–≤)
        for user_id in non_admin_users[:50]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            try:
                is_subscribed = await telegram_api.check_user_subscription(
                    user_id, channel.channel_url
                )
                checked_count += 1
                if is_subscribed:
                    subscribed_count += 1

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                await asyncio.sleep(0.1)

            except Exception as e:
                logger.warning(f"Failed to check subscription for user {user_id}: {e}")
                continue

        subscription_rate = (subscribed_count / checked_count * 100) if checked_count > 0 else 0

        channel_stats.append({
            'channel': channel,
            'subscribed': subscribed_count,
            'checked': checked_count,
            'rate': subscription_rate
        })

        total_subscribed += subscribed_count
        total_checks += checked_count

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
    for stat in channel_stats:
        try:
            channel_info = await telegram_api.get_chat_info(stat['channel'].channel_url)
            stat['member_count'] = channel_info.get('member_count', 0) if channel_info else 0
        except:
            stat['member_count'] = 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    overall_rate = (total_subscribed / total_checks * 100) if total_checks > 0 else 0

    text = f"""üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–î–ü–ò–°–û–ö</b>

üë• <b>–û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:</b>
‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count:,}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users):,}
‚îú –ê–¥–º–∏–Ω–æ–≤ (–Ω–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è): {admins_count}
‚îú –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(non_admin_users):,}
‚îî –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–æ–∫: {overall_rate:.1f}%

üì∫ <b>–ü–û –ö–ê–ù–ê–õ–ê–ú:</b>"""

    active_channels = [s for s in channel_stats if s['channel'].is_active]

    if not active_channels:
        text += "\nüì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
    else:
        for i, stat in enumerate(active_channels, 1):
            channel = stat['channel']
            subscribed = stat['subscribed']
            checked = stat['checked']
            rate = stat['rate']
            member_count = stat['member_count']

            text += f"\n\n{i}. <b>{channel.display_name}</b>"
            text += f"\n‚îú –ü–æ–¥–ø–∏—Å–∞–Ω–æ: {subscribed}/{checked} ({rate:.1f}%)"
            text += f"\n‚îú –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: {member_count:,}"
            text += f"\n‚îî –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if channel.is_active else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}"

    # –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    text += f"\n\nüìà <b>–ê–ù–ê–õ–ò–ó:</b>"

    if overall_rate >= 90:
        text += "\n‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–æ–∫!"
    elif overall_rate >= 70:
        text += "\n‚ö†Ô∏è –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å, –Ω–æ –µ—Å—Ç—å –ø–æ—Ç–µ—Ä–∏"
    elif overall_rate >= 50:
        text += "\n‚ùå –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å, –º–Ω–æ–≥–æ –æ—Ç–ø–∏—Å–æ–∫"
    else:
        text += "\nüí• –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–æ–∫!"

    if len(active_channels) > 3:
        text += "\nüí° –ú–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –º–æ–∂–µ—Ç —Å–Ω–∏–∂–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é"

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    worst_channel = min(active_channels, key=lambda x: x['rate']) if active_channels else None
    if worst_channel and worst_channel['rate'] < 50:
        text += f"\nüîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª: {worst_channel['channel'].display_name}"

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–π
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton

    builder = InlineKeyboardBuilder()

    # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            callback_data=AdminCallback(action="subscription_stats").pack()
        )
    )

    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
    if active_channels:
        builder.row(
            InlineKeyboardButton(
                text="üìã –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º",
                callback_data=AdminCallback(action="detailed_channel_stats").pack()
            )
        )

    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    builder.row(
        InlineKeyboardButton(
            text="üìä –≠–∫—Å–ø–æ—Ä—Ç CSV",
            callback_data=AdminCallback(action="export_subscription_stats").pack()
        )
    )

    # –ù–∞–∑–∞–¥
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=AdminCallback(action="subscriptions").pack()
        )
    )

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(AdminCallback.filter(F.action == "detailed_channel_stats"))
async def show_detailed_channel_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º"""

    from app.services.telegram_api_service import TelegramAPIService
    telegram_api = TelegramAPIService()

    await callback.message.edit_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")

    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        channels_result = await session.execute(
            select(RequiredSubscription)
            .where(RequiredSubscription.is_active == True)
            .order_by(RequiredSubscription.order_index)
        )
        channels = list(channels_result.scalars().all())

        if not channels:
            text = "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"

            from aiogram.utils.keyboard import InlineKeyboardBuilder
            from aiogram.types import InlineKeyboardButton

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=AdminCallback(action="subscription_stats").pack()
                )
            )

            await callback.message.edit_text(text, reply_markup=builder.as_markup())
            await callback.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_result = await session.execute(
            select(User.telegram_id, User.username, User.level)
            .where(
                and_(
                    User.is_active == True,
                    User.is_banned == False
                )
            )
            .limit(30)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        )
        users = list(users_result.fetchall())
        non_admin_users = [u for u in users if u.telegram_id not in settings.ADMIN_IDS]

    text = f"""üìä <b>–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>

üë• –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(non_admin_users)}
üì∫ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}

üìà <b>–ü–û–î–†–û–ë–ù–û–°–¢–ò –ü–û –ö–ê–ù–ê–õ–ê–ú:</b>"""

    for i, channel in enumerate(channels, 1):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        try:
            channel_info = await telegram_api.get_chat_info(channel.channel_url)
            member_count = channel_info.get('member_count', 0) if channel_info else 0
        except:
            member_count = 0

        # –°—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
        subscribed_count = 0
        total_checked = min(len(non_admin_users), 20)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 20

        for user in non_admin_users[:20]:
            try:
                is_subscribed = await telegram_api.check_user_subscription(
                    user.telegram_id, channel.channel_url
                )
                if is_subscribed:
                    subscribed_count += 1
                await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            except:
                continue

        subscription_rate = (subscribed_count / total_checked * 100) if total_checked > 0 else 0

        text += f"\n\n{i}. <b>{channel.display_name}</b>"
        text += f"\n‚îú üìä –ü–æ–¥–ø–∏—Å–∞–Ω–æ: {subscribed_count}/{total_checked} ({subscription_rate:.1f}%)"
        text += f"\n‚îú üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count:,}"
        text += f"\n‚îú üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {channel.created_at.strftime('%d.%m.%Y')}"
        text += f"\n‚îî üîó –°—Å—ã–ª–∫–∞: {channel.channel_url}"

    # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    text += f"\n\nüéØ <b>–ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:</b>"
    text += f"\n‚Ä¢ –ö–∞–Ω–∞–ª—ã —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"
    text += f"\n‚Ä¢ –ü–µ—Ä–≤—ã–µ –∫–∞–Ω–∞–ª—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã"
    text += f"\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ‚â•80% –ø–æ–¥–ø–∏—Å–æ–∫"

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton

    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data=AdminCallback(action="detailed_channel_stats").pack()
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
            callback_data=AdminCallback(action="subscription_stats").pack()
        )
    )

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(AdminCallback.filter(F.action == "export_subscription_stats"))
async def export_subscription_stats(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""

    current_time = datetime.utcnow().strftime('%d.%m.%Y %H:%M')

    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        channels_result = await session.execute(
            select(RequiredSubscription)
            .order_by(RequiredSubscription.order_index)
        )
        channels = list(channels_result.scalars().all())

        users_count = await session.execute(select(func.count(User.id)))
        total_users = users_count.scalar() or 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º CSV-–ø–æ–¥–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
    export_text = f"""üìä <b>–≠–ö–°–ü–û–†–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û–î–ü–ò–°–û–ö</b>

üìÖ <b>–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:</b> {current_time}
üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users:,}
üì∫ <b>–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤:</b> {len(channels)}

üìã <b>–î–ê–ù–ù–´–ï –ü–û –ö–ê–ù–ê–õ–ê–ú:</b>

| ‚Ññ | –ö–∞–Ω–∞–ª | –°—Ç–∞—Ç—É—Å | –°—Å—ã–ª–∫–∞ |
|---|-------|--------|--------|"""

    for i, channel in enumerate(channels, 1):
        status = "–ê–∫—Ç–∏–≤–µ–Ω" if channel.is_active else "–û—Ç–∫–ª—é—á–µ–Ω"
        export_text += f"\n| {i} | {channel.display_name} | {status} | {channel.channel_url} |"

    export_text += f"\n\nüìà <b>–ù–ê–°–¢–†–û–ô–ö–ò –≠–ö–°–ü–û–†–¢–ê:</b>"
    export_text += f"\n‚Ä¢ –§–æ—Ä–º–∞—Ç: –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞"
    export_text += f"\n‚Ä¢ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8"
    export_text += f"\n‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: PR GRAM Bot Admin Panel"

    export_text += f"\n\nüí° <i>–î–ª—è –ø–æ–ª–Ω–æ–≥–æ CSV —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</i>"

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton

    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
            callback_data="copy_export_data"
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
            callback_data=AdminCallback(action="subscription_stats").pack()
        )
    )

    await callback.message.edit_text(export_text, reply_markup=builder.as_markup())
    await callback.answer("üìä –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

# =============================================================================
# –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

@router.callback_query(AdminCallback.filter(F.action == "system"))
async def show_system_functions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    text = """‚öôÔ∏è <b>–°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò</b>

üõ†Ô∏è <b>–î–û–°–¢–£–ü–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:</b>
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —á–µ–∫–æ–≤
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b>
–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ."""
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ",
            callback_data=AdminCallback(action="cleanup").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
            callback_data=AdminCallback(action="broadcast").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÜÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–Ω–∏",
            callback_data=AdminCallback(action="update_levels").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
            callback_data=AdminCallback(action="export_data").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É",
            callback_data=AdminCallback(action="menu").pack()
        )
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(AdminCallback.filter(F.action == "cleanup"))
async def system_cleanup(
    callback: CallbackQuery,
    check_service: CheckService
):
    """–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"""
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —á–µ–∫–æ–≤
    expired_checks = await check_service.cleanup_expired_checks()
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏–π
    expired_executions = 0
    async with get_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        expired_time = datetime.utcnow() - timedelta(hours=24)
        result = await session.execute(
            select(TaskExecution).where(
                and_(
                    TaskExecution.status == ExecutionStatus.PENDING,
                    TaskExecution.created_at < expired_time
                )
            )
        )
        
        for execution in result.scalars():
            execution.status = ExecutionStatus.EXPIRED
            expired_executions += 1
        
        await session.commit()
    
    text = f"""üßπ <b>–°–ò–°–¢–ï–ú–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>

üìä <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´:</b>
‚îú –ò—Å—Ç–µ–∫—à–∏—Ö —á–µ–∫–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {expired_checks}
‚îú –ò—Å—Ç–µ–∫—à–∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {expired_executions}
‚îî –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞ –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    await callback.answer("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_menu_keyboard()
    )

@router.callback_query(AdminCallback.filter(F.action == "broadcast"))
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
    
    await state.set_state(AdminStates.entering_broadcast_message)
    
    text = """üì¢ <b>–ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê</b>

–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–º–µ—Ç–∫—É HTML
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤

üí° <b>–î–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–∑–º–µ—Ç–∫–∞:</b>
‚Ä¢ <code>&lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;</code>
‚Ä¢ <code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code>
‚Ä¢ <code>&lt;code&gt;–∫–æ–¥&lt;/code&gt;</code>

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await callback.message.edit_text(text)
    await callback.answer()

@router.message(AdminStates.entering_broadcast_message)
async def process_broadcast(
    message: Message,
    state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
    broadcast_text = message.text
    
    if len(broadcast_text) > 4096:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º",
            callback_data="confirm_broadcast"
        ),
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_broadcast"
        )
    )
    
    await state.update_data(broadcast_message=broadcast_text)
    
    preview_text = f"""üì¢ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò</b>

<b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>

{broadcast_text}

‚ö†Ô∏è <b>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</b>"""
    
    await message.answer(preview_text, reply_markup=builder.as_markup())

@router.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    
    data = await state.get_data()
    broadcast_message = data.get('broadcast_message')
    
    if not broadcast_message:
        await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with get_session() as session:
        result = await session.execute(
            select(User.telegram_id).where(
                and_(
                    User.is_active == True,
                    User.is_banned == False
                )
            )
        )
        user_ids = [row[0] for row in result.fetchall()]
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    await callback.message.edit_text(
        f"üì§ <b>–†–ê–°–°–´–õ–ö–ê –ó–ê–ü–£–©–ï–ù–ê</b>\n\n–û—Ç–ø—Ä–∞–≤–∫–∞ {len(user_ids):,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º..."
    )
    
    sent_count = 0
    failed_count = 0
    
    for user_id in user_ids:
        try:
            await callback.bot.send_message(
                chat_id=user_id,
                text=broadcast_message,
                parse_mode="HTML"
            )
            sent_count += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
            if sent_count % 30 == 0:
                import asyncio
                await asyncio.sleep(1)
                
        except Exception:
            failed_count += 1
            continue
    
    result_text = f"""‚úÖ <b>–†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>

üìä <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´:</b>
‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count:,}
‚îú –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count:,}
‚îî –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {len(user_ids):,}

üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(sent_count/len(user_ids)*100 if user_ids else 0):.1f}%"""
    
    await callback.message.edit_text(
        result_text,
        reply_markup=get_admin_menu_keyboard()
    )
    
    await state.clear()
    await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

@router.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå <b>–†–ê–°–°–´–õ–ö–ê –û–¢–ú–ï–ù–ï–ù–ê</b>",
        reply_markup=get_admin_menu_keyboard()
    )
    await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

@router.callback_query(AdminCallback.filter(F.action == "update_levels"))
async def update_user_levels(callback: CallbackQuery, user_service: UserService):
    """–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    updated_count = 0
    
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await session.execute(select(User))
        users = list(result.scalars().all())
        
        for user in users:
            old_level = user.level
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
            if user.balance >= settings.LEVEL_THRESHOLDS["premium"]:
                new_level = "premium"
            elif user.balance >= settings.LEVEL_THRESHOLDS["gold"]:
                new_level = "gold"
            elif user.balance >= settings.LEVEL_THRESHOLDS["silver"]:
                new_level = "silver"
            else:
                new_level = "bronze"
            
            if old_level != new_level:
                user.level = new_level
                updated_count += 1
        
        await session.commit()
    
    text = f"""‚¨ÜÔ∏è <b>–û–ë–ù–û–í–õ–ï–ù–ò–ï –£–†–û–í–ù–ï–ô –ó–ê–í–ï–†–®–ï–ù–û</b>

üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {updated_count:,}

–í—Å–µ —É—Ä–æ–≤–Ω–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–∏–º –±–∞–ª–∞–Ω—Å–∞–º."""
    
    await callback.answer(f"‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —É—Ä–æ–≤–Ω–µ–π")
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_menu_keyboard()
    )

@router.callback_query(AdminCallback.filter(F.action == "export_data"))
async def export_system_data(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    async with get_session() as session:
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'users': await session.execute(select(func.count(User.id))),
            'tasks': await session.execute(select(func.count(Task.id))),
            'executions': await session.execute(select(func.count(TaskExecution.id))),
            'transactions': await session.execute(select(func.count(Transaction.id)))
        }
        
        export_time = datetime.utcnow().strftime('%d.%m.%Y %H:%M')
        
        export_text = f"""üìä <b>–≠–ö–°–ü–û–†–¢ –°–ò–°–¢–ï–ú–ù–´–• –î–ê–ù–ù–´–•</b>

üìÖ <b>–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:</b> {export_time}

üìà <b>–û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:</b>
‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users'].scalar():,}
‚îú –ó–∞–¥–∞–Ω–∏–π: {stats['tasks'].scalar():,}
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {stats['executions'].scalar():,}
‚îî –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['transactions'].scalar():,}

üíæ <b>–§–æ—Ä–º–∞—Ç:</b> –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
üîê <b>–î–æ—Å—Ç—É–ø:</b> –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã

üí° <i>–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV/JSON –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</i>"""
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º",
                callback_data=AdminCallback(action="system").pack()
            )
        )
        
        await callback.message.edit_text(export_text, reply_markup=builder.as_markup())
        await callback.answer("üìä –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–¢–ú–ï–ù–´
# =============================================================================

class SomeState(StatesGroup):
    some_state = State()

@router.message(F.text.in_(["‚ùå –û—Ç–º–µ–Ω–∞", "/cancel"]), StateFilter(SomeState.some_state))
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")